"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stopSignLang = exports.startSignLang = void 0;
var _pmloglib = require("@enact/webos/pmloglib");
var _LS2Request = _interopRequireDefault(require("../LS2Request"));
var _platform = require("../platform");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /* eslint-disable no-console */
var signLangEnabled = null;
var appId = '';
var checkSignLang = function checkSignLang() {
  return new Promise(function (resolve, reject) {
    if (signLangEnabled === null) {
      new _LS2Request["default"]().send({
        service: 'luna://com.webos.settingsservice',
        method: 'getSystemSettings',
        subscribe: true,
        parameters: {
          'keys': ['signLanguageGuidance'],
          'category': 'option'
        },
        onSuccess: function onSuccess(res) {
          (0, _pmloglib.info)('enact_signLang_checkSignLang', {
            'onSuccess': res
          }, '');
          if (res && res.settings.signLanguageGuidance === 'on') {
            signLangEnabled = true;
            appId = typeof window == 'object' && window.PalmSystem && window.PalmSystem.getIdentifier && window.PalmSystem.getIdentifier();
            resolve();
            return;
          }
          signLangEnabled = false;
          reject();
        },
        onFailure: function onFailure(err) {
          (0, _pmloglib.info)('enact_signLang_checkSignLang', {
            'onFailure': err
          }, '');
          reject('Failed to get sign language setting value: ' + JSON.stringify(err));
        }
      });
    } else if (signLangEnabled) {
      resolve();
    } else {
      reject();
    }
  });
};
var callSignLangAPI = function callSignLangAPI(signLangId, active, option) {
  return function () {
    return new Promise(function (resolve, reject) {
      var parameters = _objectSpread({
        appId: appId,
        'signGuidanceId': signLangId,
        'focusOut': !active
      }, option);
      (0, _pmloglib.info)('enact_signLang_callSignLangAPI', parameters, '');
      new _LS2Request["default"]().send({
        service: 'luna://com.webos.service.signlanguageavatar',
        method: 'play',
        parameters: parameters,
        onSuccess: resolve,
        onFailure: function onFailure(err) {
          (0, _pmloglib.info)('enact_signLang_callSignLangAPI', {
            'onFailure': err
          }, '');
          reject('Failed to callSignLangAPI: ' + JSON.stringify(err));
        }
      });
    });
  };
};
var requestSignLang = function requestSignLang(signLangId, active) {
  var option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (_platform.platform.tv) {
    checkSignLang().then(callSignLangAPI(signLangId, active, option))["catch"](function (message) {
      if (message) {
        console.error("Failed to requestSignLang: ".concat(message));
      }
    });
  } else {
    console.warn('Platform doesn\'t support sing language.');
  }
};

/**
 * Activates sign language based on the singLangID.
 *
 * @function
 * @param {String} [signLangId=''] signLangId Unique ID used for sign language.
 * @param {Object} [option={}] Additional option for sign language.
 * @returns {undefined}
 * @memberof webos/signLang
 * @public
 */
var startSignLang = exports.startSignLang = function startSignLang() {
  var signLangId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  requestSignLang(signLangId, true, option);
};

/**
 * Deactivates sign language based on the signLangID.
 *
 * @function
 * @param {String} [signLangId=''] signLangId Unique ID used for sign language.
 * @param {Object} [option={}] Additional option for sign language.
 * @returns {undefined}
 * @memberof webos/signLang
 * @public
 */
var stopSignLang = exports.stopSignLang = function stopSignLang() {
  var signLangId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  requestSignLang(signLangId, false, option);
};