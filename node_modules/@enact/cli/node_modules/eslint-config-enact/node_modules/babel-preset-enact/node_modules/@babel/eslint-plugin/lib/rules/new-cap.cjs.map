{"version":3,"names":["ruleComposer","require","eslint","rule","Linter","getRules","get","isDecorator","node","parent","type","module","exports","filterReports","problem"],"sources":["../../src/rules/new-cap.cjs"],"sourcesContent":["const ruleComposer = require(\"eslint-rule-composer\");\nconst eslint = require(\"eslint\");\n\nconst rule = new eslint.Linter().getRules().get(\"new-cap\");\n\n/**\n * Returns whether a node is under a decorator or not.\n * @param  {ASTNode}  node CallExpression node\n * @returns {Boolean} Returns true if the node is under a decorator.\n */\nfunction isDecorator(node) {\n  return node.parent.type === \"Decorator\";\n}\n\nmodule.exports = ruleComposer.filterReports(\n  rule,\n  problem => !isDecorator(problem.node),\n);\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AACpD,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAME,IAAI,GAAG,IAAID,MAAM,CAACE,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,GAAG,CAAC,SAAS,CAAC;AAO1D,SAASC,WAAWA,CAACC,IAAI,EAAE;EACzB,OAAOA,IAAI,CAACC,MAAM,CAACC,IAAI,KAAK,WAAW;AACzC;AAEAC,MAAM,CAACC,OAAO,GAAGZ,YAAY,CAACa,aAAa,CACzCV,IAAI,EACJW,OAAO,IAAI,CAACP,WAAW,CAACO,OAAO,CAACN,IAAI,CACtC,CAAC"}