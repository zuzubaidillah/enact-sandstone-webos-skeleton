"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _LocaleInfo = _interopRequireDefault(require("ilib/lib/LocaleInfo"));
var _locale = require("../locale");
var _excluded = ["latinLanguageOverrides", "nonLatinLanguageOverrides"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var base = 'enact-locale-';

// Callback-friendly version of Promise.all()
function all(fns, callback) {
  var result = [];
  var complete = 0;
  var done = function done(index) {
    return function (value) {
      result[index] = value;
      complete++;
      if (complete === fns.length) {
        callback(result);
      }
    };
  };
  fns.forEach(function (fn, index) {
    return fn(done(index));
  });
}
function getClassesForLocale(li, options) {
  var locale = li.getLocale();
  var latinLanguageOverrides = options.latinLanguageOverrides,
    nonLatinLanguageOverrides = options.nonLatinLanguageOverrides,
    rest = _objectWithoutProperties(options, _excluded);
  all([
  // allow enact to define other fonts for non-Latin languages, or for certain
  // Latin-based languages where the characters with some accents don't appear in the
  // regular fonts, creating a strange 'ransom note' look with a mix of fonts in the
  // same word. So, treat it like a non-Latin language in order to get all the characters
  // to display with the same font.
  function (done) {
    return (0, _locale.isNonLatinLocale)(locale, _objectSpread(_objectSpread({}, rest), {}, {
      latinLanguageOverrides: latinLanguageOverrides,
      nonLatinLanguageOverrides: nonLatinLanguageOverrides,
      onLoad: function onLoad(isNonLatin) {
        return done(isNonLatin ? base + 'non-latin' : '');
      }
    }));
  },
  // allow enact to apply right-to-left styles to the app and widgets if necessary
  function (done) {
    return (0, _locale.isRtlLocale)(_objectSpread(_objectSpread({}, rest), {}, {
      onLoad: function onLoad(isRtl) {
        return done(isRtl ? base + 'right-to-left' : '');
      }
    }));
  }], function (classes) {
    var scriptName = li.getScript();
    if (scriptName !== 'Latn' && scriptName !== 'Cyrl' && scriptName !== 'Grek' && scriptName !== 'Kore') {
      // GF-45884: allow enact to avoid setting italic fonts for those scripts that do not
      // commonly use italics
      classes.push(base + 'non-italic');
    }

    // allow enact or the apps to give CSS classes that are specific to the language, country, or script
    if (locale.getLanguage()) {
      classes.push(base + locale.getLanguage());
      if (locale.getScript()) {
        classes.push(base + locale.getLanguage() + '-' + locale.getScript());
        if (locale.getRegion()) {
          classes.push(base + locale.getLanguage() + '-' + locale.getScript() + '-' + locale.getRegion());
        }
      } else if (locale.getRegion()) {
        classes.push(base + locale.getLanguage() + '-' + locale.getRegion());
      }
    }
    if (locale.getScript()) {
      classes.push(base + locale.getScript());
    }
    if (locale.getRegion()) {
      classes.push(base + locale.getRegion());
    }
    options.onLoad(classes.filter(Boolean).join(' '));
  });
}

/*
 * A function that returns locale in class name.
 *
 * @memberof i18n/I18nDecorator
 * @param {options.sync} Perform a synchronous request for the classes
 * @param {options.onLoad} Called with a string of i18n classes
 * @param {options.latinLanguageOverrides} Array of locales to treat as latin
 * @param {options.nonLatinLanguageOverrides} Array of locales to treat as non-latin
 * @private
 */
function getI18nClasses() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var sync = options.sync,
    _onLoad = options.onLoad;
  if (!_onLoad) return;

  // eslint-disable-next-line no-new,no-undefined
  new _LocaleInfo["default"](undefined, {
    sync: sync,
    onLoad: function onLoad(li) {
      return getClassesForLocale(li, _objectSpread(_objectSpread({}, options), {}, {
        onLoad: _onLoad
      }));
    }
  }); // for the current locale
}
var _default = exports["default"] = getI18nClasses;