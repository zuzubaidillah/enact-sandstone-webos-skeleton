"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _VirtualList = require("../VirtualList");
var _ImageItem = require("../../ImageItem");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["index"],
  _excluded2 = ["index"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var activate = function activate(list) {
  return _react.fireEvent.keyUp(list, {
    keyCode: 13
  });
};
var keyDown = function keyDown(keyCode) {
  return function (list) {
    return _react.fireEvent.keyDown(list, {
      keyCode: keyCode
    });
  };
};
var downKeyDown = keyDown(40);
var getElementClientCenter = function getElementClientCenter(element) {
  var _element$getBoundingC = element.getBoundingClientRect(),
    left = _element$getBoundingC.left,
    top = _element$getBoundingC.top,
    width = _element$getBoundingC.width,
    height = _element$getBoundingC.height;
  return {
    x: left + width / 2,
    y: top + height / 2
  };
};
var drag = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (element, _ref) {
    var delta = _ref.delta,
      _ref$steps = _ref.steps,
      steps = _ref$steps === void 0 ? 1 : _ref$steps;
    var from = getElementClientCenter(element);
    var to = {
      x: from.x + delta.x,
      y: from.y + delta.y
    };
    var step = {
      x: (to.x - from.x) / steps,
      y: (to.y - from.y) / steps
    };
    var current = {
      clientX: from.x,
      clientY: from.y
    };
    _react.fireEvent.mouseEnter(element, current);
    _react.fireEvent.mouseOver(element, current);
    _react.fireEvent.mouseMove(element, current);
    _react.fireEvent.mouseDown(element, current);
    for (var i = 0; i < steps; i++) {
      current.clientX += step.x;
      current.clientY += step.y;
      (0, _react.act)(function () {
        return jest.advanceTimersByTime(1000 / steps);
      });
      _react.fireEvent.mouseMove(element, current);
    }
    _react.fireEvent.mouseUp(element, current);
  });
  return function drag(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();
describe('VirtualGridList', function () {
  var clientSize, dataSize, getScrollTo, handlerOnScroll, handlerOnScrollStart, handlerOnScrollStop, items, itemSize, myScrollTo, onScrollCount, onScrollStartCount, onScrollStopCount, renderItem, resultScrollTop, startScrollTop, svgGenerator;
  beforeEach(function () {
    clientSize = {
      clientWidth: 1280,
      clientHeight: 720
    };
    dataSize = 100;
    items = [];
    itemSize = {
      minWidth: 180,
      minHeight: 270
    };
    onScrollCount = 0;
    onScrollStartCount = 0;
    onScrollStopCount = 0;
    resultScrollTop = 0;
    startScrollTop = 0;
    getScrollTo = function getScrollTo(scrollTo) {
      myScrollTo = scrollTo;
    };
    handlerOnScroll = function handlerOnScroll() {
      onScrollCount++;
    };
    handlerOnScrollStart = function handlerOnScrollStart(e) {
      startScrollTop = e.scrollTop;
      onScrollStartCount++;
    };
    handlerOnScrollStop = function handlerOnScrollStop(done, testCase) {
      return function (e) {
        onScrollStopCount++;
        resultScrollTop = e.scrollTop;
        testCase();
        done();
      };
    };
    renderItem = function renderItem(_ref3) {
      var index = _ref3.index,
        rest = _objectWithoutProperties(_ref3, _excluded);
      // eslint-disable-line enact/display-name
      var _items$index = items[index],
        text = _items$index.text,
        source = _items$index.source;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItem, _objectSpread(_objectSpread({}, rest), {}, {
        src: source,
        style: {
          width: '100%'
        },
        children: text
      }));
    };
    svgGenerator = function svgGenerator(width, height, bgColor, textColor, customText) {
      return "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 ".concat(width, " ").concat(height, "' width='").concat(width, "' height='").concat(height, "'%3E") + "%3Crect width='".concat(width, "' height='").concat(height, "' fill='%23").concat(bgColor, "'%3E%3C/rect%3E") + "%3Ctext x='50%25' y='50%25' dominant-baseline='middle' text-anchor='middle' font-size='36px' fill='%23".concat(textColor, "'%3E").concat(customText, "%3C/text%3E%3C/svg%3E");
    };
    var itemNumberDigits = dataSize > 0 ? (dataSize - 1 + '').length : 0;
    var headingZeros = Array(itemNumberDigits).join('0');
    for (var i = 0; i < dataSize; i++) {
      var count = (headingZeros + i).slice(-itemNumberDigits),
        text = "Item ".concat(count),
        color = Math.floor(Math.random() * (0x1000000 - 0x101010) + 0x101010).toString(16),
        source = svgGenerator(300, 300, color, 'ffffff', "Image ".concat(i));
      items.push({
        text: text,
        source: source
      });
    }
    return dataSize;
  });
  afterEach(function () {
    clientSize = null;
    dataSize = null;
    getScrollTo = null;
    handlerOnScroll = null;
    handlerOnScrollStart = null;
    handlerOnScrollStop = null;
    items = null;
    itemSize = null;
    myScrollTo = null;
    onScrollCount = null;
    onScrollStartCount = null;
    onScrollStopCount = null;
    renderItem = null;
    resultScrollTop = null;
    startScrollTop = null;
  });
  test('should render a list of \'items\'', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
      clientSize: clientSize,
      dataSize: dataSize,
      itemRenderer: renderItem,
      itemSize: itemSize
    }));
    var expected = 'Item 00';
    var actual = _react.screen.getByRole('list').children.item(0).textContent;
    expect(actual).toBe(expected);
  });
  test('should render (clientHeight / itemHeight + overhang) items', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
      clientSize: clientSize,
      dataSize: dataSize,
      itemRenderer: renderItem,
      itemSize: itemSize
    }));
    var expected = 42; // (7 * 3) + (7 * 3)
    var actual = _react.screen.getByRole('list').children.length;
    expect(actual).toBe(expected);
  });
  test('should re-render clientHeight / itemHeight + overhang) items after changing client size', function () {
    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize
      })),
      rerender = _render.rerender;
    var newClientSize = {
      clientWidth: 1280,
      clientHeight: 360
    };
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
      clientSize: newClientSize,
      dataSize: dataSize,
      itemRenderer: renderItem,
      itemSize: itemSize
    }));
    var expected = 35; // (7 * 2) + (7 * 3)
    var actual = _react.screen.getByRole('list').children.length;
    expect(actual).toBe(expected);
  });
  describe('ScrollTo', function () {
    test('should scroll to the specific item of a given index with scrollTo', function (done) {
      var onScrollStop = handlerOnScrollStop(done, function () {
        var expected = 273; // 270 + 3
        var actual = resultScrollTop;
        expect(actual).toBe(expected);
      });
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        onScrollStop: onScrollStop
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          index: 8,
          animate: false
        });
      });
    });
    test('should scroll to the given \'x\' position with scrollTo', function (done) {
      var onScrollStop = handlerOnScrollStop(done, function () {
        var expected = 1;
        var actual = onScrollStopCount;
        expect(actual).toBe(expected);
      });
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: dataSize,
        direction: "horizontal",
        itemRenderer: renderItem,
        itemSize: itemSize,
        onScrollStop: onScrollStop
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          position: {
            x: 100
          },
          animate: false
        });
      });
    });
    test('should scroll to the given \'y\' position with scrollTo', function (done) {
      var onScrollStop = handlerOnScrollStop(done, function () {
        var expected = 100;
        var actual = resultScrollTop;
        expect(actual).toBe(expected);
      });
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        onScrollStop: onScrollStop
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          position: {
            y: 100
          },
          animate: false
        });
      });
    });
    test('should scroll to the given align with scrollTo', function (done) {
      var onScrollStop = handlerOnScrollStop(done, function () {
        var expected = Math.ceil(dataSize / 7) * (itemSize.minHeight + 3) - clientSize.clientHeight; // 1280/180 = 7
        var actual = resultScrollTop;
        expect(actual).toBe(expected);
      });
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        onScrollStop: onScrollStop
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          align: 'bottom',
          animate: false
        });
      });
    });
    test('should scroll to the given align with scrollTo after changing dataSize', function (done) {
      var newDataSize = 50;
      var onScrollStop = handlerOnScrollStop(done, function () {
        var expected = Math.ceil(newDataSize / 7) * (itemSize.minHeight + 3) - clientSize.clientHeight;
        var actual = resultScrollTop;
        expect(actual).toBe(expected);
      });
      var _render2 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
          cbScrollTo: getScrollTo,
          clientSize: clientSize,
          dataSize: dataSize,
          itemRenderer: renderItem,
          itemSize: itemSize,
          onScrollStop: onScrollStop
        })),
        rerender = _render2.rerender;
      rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: newDataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        onScrollStop: onScrollStop
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          align: 'bottom',
          animate: false
        });
      });
    });
    test('should scroll to the given align with scrollTo after changing itemSize', function (done) {
      var newItemSize = {
        minWidth: 180,
        minHeight: 300
      };
      var onScrollStop = handlerOnScrollStop(done, function () {
        var expected = Math.ceil(dataSize / 7) * (newItemSize.minHeight + 3) - clientSize.clientHeight;
        var actual = resultScrollTop;
        expect(actual).toBe(expected);
      });
      var _render3 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
          cbScrollTo: getScrollTo,
          clientSize: clientSize,
          dataSize: dataSize,
          itemRenderer: renderItem,
          itemSize: itemSize,
          onScrollStop: onScrollStop
        })),
        rerender = _render3.rerender;
      rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: newItemSize,
        onScrollStop: onScrollStop
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          align: 'bottom',
          animate: false
        });
      });
    });
    test('should scroll to the given align with scrollTo after changing spacing', function (done) {
      var newSpacing = 1;
      var onScrollStop = handlerOnScrollStop(done, function () {
        var expected = Math.ceil(dataSize / 7) * (itemSize.minHeight + newSpacing + 3) - clientSize.clientHeight - newSpacing;
        var actual = resultScrollTop;
        expect(actual).toBe(expected);
      });
      var _render4 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
          cbScrollTo: getScrollTo,
          clientSize: clientSize,
          dataSize: dataSize,
          itemRenderer: renderItem,
          itemSize: itemSize,
          onScrollStop: onScrollStop
        })),
        rerender = _render4.rerender;
      rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        onScrollStop: onScrollStop,
        spacing: newSpacing
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          align: 'bottom',
          animate: false
        });
      });
    });
  });
  describe('scroll events', function () {
    test('should call onScrollStart once', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        onScrollStart: handlerOnScrollStart
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          position: {
            y: 100
          },
          animate: false
        });
      });
      var expected = 1;
      var actual = onScrollStartCount;
      expect(actual).toBe(expected);
    });
    test('should call onScroll once', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        onScroll: handlerOnScroll
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          position: {
            y: 100
          },
          animate: false
        });
      });
      var expected = 1;
      var actual = onScrollCount;
      expect(actual).toBe(expected);
    });
    test('should call onScrollStop once', function (done) {
      var onScrollStop = handlerOnScrollStop(done, function () {
        var expected = 1;
        var actual = onScrollStopCount;
        expect(actual).toBe(expected);
      });
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        onScrollStop: onScrollStop
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          position: {
            y: 100
          },
          animate: false
        });
      });
    });
  });
  describe('Scroll by event', function () {
    beforeEach(function () {
      jest.useFakeTimers();
    });
    afterEach(function () {
      jest.useRealTimers();
    });
    test('should scroll by wheel', function (done) {
      var fn = jest.fn();
      var onScrollStop = handlerOnScrollStop(done, function () {
        fn();
        expect(startScrollTop).toBe(0);
        expect(onScrollStartCount).toBe(1);
        expect(resultScrollTop).toBeGreaterThan(0);
      });
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        onScrollStop: onScrollStop,
        onScrollStart: handlerOnScrollStart
      }));
      var list = _react.screen.getByRole('list');
      _react.fireEvent.wheel(list, {
        deltaY: 100
      });
      (0, _react.act)(function () {
        return jest.advanceTimersByTime(1000);
      }); // Wait onScrollStop

      expect(fn).toBeCalled();
    });
    test('should not scroll by wheel when `noScrollByWheel` prop is true', function (done) {
      var fn = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        noScrollByWheel: true,
        onScrollStop: fn,
        onScrollStart: handlerOnScrollStart
      }));
      var list = _react.screen.getByRole('list');
      _react.fireEvent.wheel(list, {
        deltaY: 100
      });
      (0, _react.act)(function () {
        return jest.advanceTimersByTime(1000);
      }); // Wait onScrollStop

      expect(fn).not.toHaveBeenCalled();
      done();
    });
    test('should scroll by drag', /*#__PURE__*/_asyncToGenerator(function* () {
      var fn = jest.fn();
      var onScrollStop = function onScrollStop(e) {
        fn();
        expect(startScrollTop).toBe(0);
        expect(onScrollStartCount).toBe(1);
        resultScrollTop = e.scrollTop;
        expect(resultScrollTop).toBeGreaterThan(0);
      };
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        onScrollStop: onScrollStop,
        onScrollStart: handlerOnScrollStart
      }));
      var list = _react.screen.getByRole('list');
      activate(list);
      yield drag(list, {
        delta: {
          x: 0,
          y: -300
        }
      });
      (0, _react.act)(function () {
        return jest.advanceTimersByTime(1000);
      }); // Wait onScrollStop

      expect(fn).toBeCalled();
    }));
    test('should not scroll by key', function (done) {
      var fn = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        onScrollStop: fn,
        onScrollStart: handlerOnScrollStart
      }));
      var list = _react.screen.getByRole('list');
      activate(list);
      for (var i = 0; i < 50; i++) {
        downKeyDown(list);
      }
      (0, _react.act)(function () {
        return jest.advanceTimersByTime(1000);
      }); // Wait onScrollStop

      expect(fn).not.toHaveBeenCalled();
      done();
    });
  });
  describe('Adding an item', function () {
    test('should render an added item named \'Password 0\' as the first item', function (done) {
      var itemArray = [{
        name: 'A'
      }, {
        name: 'B'
      }, {
        name: 'C'
      }];
      var renderItemArray = function renderItemArray(_ref5) {
        var index = _ref5.index,
          rest = _objectWithoutProperties(_ref5, _excluded2);
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
          id: 'item' + index,
          children: itemArray[index].name
        }));
      };
      var _render5 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
          clientSize: clientSize,
          dataSize: itemArray.length,
          itemRenderer: renderItemArray,
          itemSize: itemSize
        })),
        rerender = _render5.rerender;
      itemArray.unshift({
        name: 'Password 0'
      });
      rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList.VirtualGridList, {
        clientSize: clientSize,
        dataSize: itemArray.length,
        itemRenderer: renderItemArray,
        itemSize: itemSize
      }));
      jest.useFakeTimers();
      (0, _react.act)(function () {
        return jest.advanceTimersByTime(0);
      });
      var expected = itemArray[0].name;
      var actual = _react.screen.getByRole('list').children.item(0).textContent;
      expect(actual).toBe(expected);
      done();
      jest.useRealTimers();
    });
  });
});