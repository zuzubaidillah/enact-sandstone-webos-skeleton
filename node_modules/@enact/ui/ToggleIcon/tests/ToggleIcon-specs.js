"use strict";

var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _ToggleIcon = _interopRequireDefault(require("../ToggleIcon"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var tap = function tap(node) {
  _react.fireEvent.mouseDown(node);
  _react.fireEvent.mouseUp(node);
};
describe('ToggleIcon Specs', function () {
  test('should call onToggle when tapped', function () {
    var handleToggle = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleIcon["default"], {
      onToggle: handleToggle,
      children: "star"
    }));
    var toggleIcon = _react.screen.getByText('star');
    tap(toggleIcon);
    var expected = 1;
    expect(handleToggle).toHaveBeenCalledTimes(expected);
  });
  test('should call onClick when clicked', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleClick = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleIcon["default"], {
      onClick: handleClick,
      children: "star"
    }));
    var toggleIcon = _react.screen.getByText('star');
    yield user.click(toggleIcon);
    var expected = 1;
    expect(handleClick).toHaveBeenCalledTimes(expected);
  }));
  test('should call onTap when tapped', function () {
    var handleTap = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleIcon["default"], {
      onTap: handleTap,
      children: "star"
    }));
    var toggleIcon = _react.screen.getByText('star');
    tap(toggleIcon);
    var expected = 1;
    expect(handleTap).toHaveBeenCalledTimes(expected);
  });
  test('should call both onToggle and onTap when tapped', function () {
    var handleBoth = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleIcon["default"], {
      onTap: handleBoth,
      onToggle: handleBoth,
      children: "star"
    }));
    var toggleIcon = _react.screen.getByText('star');
    tap(toggleIcon);
    var expected = 2;
    expect(handleBoth).toHaveBeenCalledTimes(expected);
  });
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleIcon["default"], {
      ref: ref,
      children: "star"
    }));
    var expected = 'DIV';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});