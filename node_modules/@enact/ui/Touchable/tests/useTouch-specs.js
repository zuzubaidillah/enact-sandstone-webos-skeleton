"use strict";

var _react = require("@testing-library/react");
var _config = require("../config");
var _useTouch = _interopRequireDefault(require("../useTouch"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["activeProp", "id"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
describe('useTouch', function () {
  var data;
  var DivComponent = function DivComponent(props) {
    data = props;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      "data-testid": "component"
    });
  };
  var TouchableComponent = function TouchableComponent(_ref) {
    var activeProp = _ref.activeProp,
      id = _ref.id,
      rest = _objectWithoutProperties(_ref, _excluded);
    var hook = (0, _useTouch["default"])(_objectSpread({
      getActive: !!activeProp
    }, rest));
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({
      id: id
    }, hook.handlers), {}, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DivComponent, _objectSpread({}, _defineProperty({}, activeProp, hook.active)))
    }));
  };
  var preventDefault = function preventDefault(ev) {
    return ev.preventDefault();
  };
  describe('config', function () {
    beforeEach(_config.resetDefaultConfig);
    afterEach(_config.resetDefaultConfig);
    test('should return active state when activeProp is configured', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active"
      }));
      var expected = data.active;
      expect(expected).toBeDefined();
    });
    test('should merge configurations', function () {
      (0, _config.configure)({
        flick: {
          maxMoves: 10
        }
      });
      var expected = 10;
      var actual = (0, _config.getConfig)().flick.maxMoves;
      expect(actual).toBe(expected);
    });
    test('should omit unsupported configurations', function () {
      (0, _config.configure)({
        flick: {
          notSupported: 10
        }
      });

      // eslint-disable-next-line no-undefined
      var expected = undefined;
      var actual = (0, _config.getConfig)().flick.notSupported;
      expect(actual).toBe(expected);
    });
    test('should not update config when local object is mutated', function () {
      var cfg = {
        flick: {
          maxMoves: 10
        }
      };
      (0, _config.configure)(cfg);
      cfg.flick.maxMoves = 20;
      var expected = 10;
      var actual = (0, _config.getConfig)().flick.maxMoves;
      expect(actual).toBe(expected);
    });
    test('should not update config when local hold.events array is mutated', function () {
      var cfg = {
        hold: {
          events: [{
            name: 'hold',
            time: 600
          }]
        }
      };
      (0, _config.configure)(cfg);
      cfg.hold.events[0].time = 2000;
      var expected = 600;
      var actual = (0, _config.getConfig)().hold.events[0].time;
      expect(actual).toBe(expected);
    });
  });
  describe('#onDown', function () {
    test('should invoke onDown handle on mouse down', function () {
      var handler = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onDown: handler
      }));
      var component = _react.screen.getByTestId('component');
      _react.fireEvent.mouseDown(component, {});
      var expected = 1;
      expect(handler).toHaveBeenCalledTimes(expected);
    });
  });
  describe('#onUp', function () {
    test('should invoke onUp handle on mouse up', function () {
      var handler = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onUp: handler
      }));
      var component = _react.screen.getByTestId('component');
      _react.fireEvent.mouseDown(component, {});
      _react.fireEvent.mouseUp(component, {});
      var expected = 1;
      expect(handler).toHaveBeenCalledTimes(expected);
    });
  });
  describe('#onTap', function () {
    test('should be called on mouse up', function () {
      var handler = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onTap: handler
      }));
      var component = _react.screen.getByTestId('component');
      _react.fireEvent.mouseDown(component, {});
      _react.fireEvent.mouseUp(component, {});
      var expected = 1;
      expect(handler).toHaveBeenCalledTimes(expected);
    });
    test('should be called on click', function () {
      var handler = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onTap: handler
      }));
      var component = _react.screen.getByTestId('component');
      _react.fireEvent.click(component, {});
      var expected = 1;
      expect(handler).toHaveBeenCalledTimes(expected);
    });
    test('should be called before onClick on click', function () {
      var handler = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onClick: handler,
        onTap: handler
      }));
      var component = _react.screen.getByTestId('component');
      _react.fireEvent.click(component, {});
      var expected = ['onTap', 'click'];
      var actual = handler.mock.calls.map(function (call) {
        return call[0].type;
      });
      expect(actual).toEqual(expected);
    });
    test('should be called before onClick on mouse up', function () {
      var handler = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onClick: handler,
        onTap: handler
      }));
      var component = _react.screen.getByTestId('component');
      var mouseDownEvent = _react.createEvent.mouseDown(component, {});
      var mouseUpEvent = _react.createEvent.mouseUp(component, {});
      var clickEvent = _react.createEvent.click(component, {});

      // a matching timeStamp is used by Touchable to prevent multiple onTaps on "true"
      // click (mouseup + click)
      Object.defineProperty(mouseDownEvent, 'timeStamp', {
        value: 1
      });
      Object.defineProperty(mouseUpEvent, 'timeStamp', {
        value: 1
      });
      Object.defineProperty(clickEvent, 'timeStamp', {
        value: 1
      });
      (0, _react.fireEvent)(component, mouseDownEvent);
      (0, _react.fireEvent)(component, mouseUpEvent);
      (0, _react.fireEvent)(component, clickEvent);
      var expected = ['onTap', 'click'];
      var actual = handler.mock.calls.map(function (call) {
        return call[0].type;
      });
      expect(actual).toEqual(expected);
    });
    test('should be preventable via onUp handler', function () {
      var handler = jest.fn();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onTap: handler,
        onUp: preventDefault
      }));
      var component = _react.screen.getByTestId('component');
      _react.fireEvent.mouseDown(component, {});
      _react.fireEvent.mouseUp(component, {});
      expect(handler).not.toHaveBeenCalled();
    });
  });
  describe('state management', function () {
    describe('activate', function () {
      test('should update active state on mouse down when activeProp is configured', function () {
        var handler = jest.fn();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
          activeProp: "active",
          onDown: handler
        }));
        var component = _react.screen.getByTestId('component');
        var beforeDown = data.active;
        _react.fireEvent.mouseDown(component, {});
        var afterDown = data.active;
        var expected = false;
        var actual = beforeDown === afterDown;
        expect(actual).toBe(expected);
      });
      test('should not update active state on mouse down when disabled', function () {
        var handler = jest.fn();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
          activeProp: "active",
          disabled: true,
          onDown: handler
        }));
        var component = _react.screen.getByTestId('component');
        _react.fireEvent.mouseDown(component, {});
        var expected = false;
        var actual = data.active;
        expect(actual).toBe(expected);
      });
      test('should not update active state on mouse down when preventDefault is called', function () {
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
          activeProp: "active",
          onDown: preventDefault
        }));
        var component = _react.screen.getByTestId('component');
        _react.fireEvent.mouseDown(component, {});
        var expected = false;
        var actual = data.active;
        expect(actual).toBe(expected);
      });
    });
    describe('deactivate', function () {
      test('should update active state on mouse up when activeProp is configured', function () {
        var handler = jest.fn();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
          activeProp: "active",
          onDown: handler
        }));
        var component = _react.screen.getByTestId('component');
        _react.fireEvent.mouseDown(component, {});
        var beforeUp = data.active;
        _react.fireEvent.mouseUp(component, {});
        var afterUp = data.active;
        var expected = false;
        var actual = beforeUp === afterUp;
        expect(actual).toBe(expected);
      });
      test('should not update active state on mouse down when disabled', function () {
        var handler = jest.fn();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
          activeProp: "active",
          disabled: true,
          onDown: handler
        }));
        var component = _react.screen.getByTestId('component');
        _react.fireEvent.mouseDown(component, {});
        var beforeUp = data.active;
        _react.fireEvent.mouseUp(component, {});
        var afterUp = data.active;
        var expected = true;
        var actual = beforeUp === afterUp;
        expect(actual).toBe(expected);
      });
      test('should not update active state on mouse down when preventDefault is called', function () {
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
          activeProp: "active",
          onDown: preventDefault
        }));
        var component = _react.screen.getByTestId('component');
        _react.fireEvent.mouseDown(component, {});
        var beforeUp = data.active;
        _react.fireEvent.mouseUp(component, {});
        var afterUp = data.active;
        var expected = true;
        var actual = beforeUp === afterUp;
        expect(actual).toBe(expected);
      });
    });
  });
  describe('touch', function () {
    test('should only emit onTap once when tapping an child instance of Touchable', function () {
      var handler = jest.fn();
      var Component = function Component() {
        var outerHook = (0, _useTouch["default"])({
          onTap: handler
        });
        var innerHook = (0, _useTouch["default"])();
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({
          id: "outer"
        }, outerHook.handlers), {}, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({
            "data-testid": "inner"
          }, innerHook.handlers), {}, {
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DivComponent, {})
          }))
        }));
      };
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
      var inner = _react.screen.getByTestId('inner');
      var mouseEvent = {
        timeStamp: 1
      };
      var touchEvent = {
        timeStamp: 1,
        changedTouches: [{
          clientX: 0,
          clientY: 0
        }],
        targetTouches: [{
          clientX: 0,
          clientY: 0
        }]
      };
      _react.fireEvent.touchStart(inner, touchEvent);
      _react.fireEvent.touchEnd(inner, touchEvent);
      _react.fireEvent.mouseDown(inner, mouseEvent);
      _react.fireEvent.mouseUp(inner, mouseEvent);
      expect(handler).toHaveBeenCalled();
    });
  });
});