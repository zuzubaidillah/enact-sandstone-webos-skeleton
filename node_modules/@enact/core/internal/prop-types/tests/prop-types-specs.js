"use strict";

var _react = require("@testing-library/react");
var _react2 = require("react");
var _propTypes = _interopRequireDefault(require("../prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure " + obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
describe('prop-types', function () {
  var DummyElement = /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {});
  var DummyRenderable = function DummyRenderable() {
    return DummyElement;
  };
  var dummyString = 'Some String';
  var TestComponent = /*#__PURE__*/function (_Component) {
    _inherits(TestComponent, _Component);
    var _super = _createSuper(TestComponent);
    function TestComponent() {
      _classCallCheck(this, TestComponent);
      return _super.apply(this, arguments);
    }
    _createClass(TestComponent, [{
      key: "render",
      value: function render() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          rest = Object.assign({}, (_objectDestructuringEmpty(_ref), _ref));
        delete rest.typeComponent;
        delete rest.typeComponentOverride;
        delete rest.typeRef;
        delete rest.typeRenderable;
        delete rest.typeRenderableOverride;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Test"
        });
      }
    }]);
    return TestComponent;
  }(_react2.Component);
  TestComponent.displayName = 'TestComponent';
  TestComponent.propTypes = {
    typeComponent: _propTypes["default"].component,
    typeComponentOverride: _propTypes["default"].componentOverride,
    typeRef: _propTypes["default"].ref,
    typeRenderable: _propTypes["default"].renderable,
    typeRenderableOverride: _propTypes["default"].renderableOverride
  };
  var consoleWarnMock = null;
  var consoleErrorMock = null;
  beforeEach(function () {
    consoleWarnMock = jest.spyOn(console, 'warn').mockImplementation();
    consoleErrorMock = jest.spyOn(console, 'error').mockImplementation();
  });
  afterEach(function () {
    consoleWarnMock.mockRestore();
    consoleErrorMock.mockRestore();
  });
  describe('no prop', function () {
    test('should not call console.error when no prop is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {}));
      expect(consoleErrorMock).not.toHaveBeenCalled();
    });
  });
  describe('component', function () {
    test('should not call console.error for EnactPropTypes.component if renderable value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeComponent: DummyRenderable
      }));
      expect(consoleErrorMock).not.toHaveBeenCalled();
    });
    test('should call console.error for EnactPropTypes.component if string value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeComponent: dummyString
      }));
      expect(consoleErrorMock).toHaveBeenCalled();
    });
    test('should call console.error for EnactPropTypes.component if element value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeComponent: DummyElement
      }));
      expect(consoleErrorMock).toHaveBeenCalled();
    });
  });
  describe('componentOverride', function () {
    test('should not call console.error for EnactPropTypes.componentOverride if renderable value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeComponentOverride: DummyRenderable
      }));
      expect(consoleErrorMock).not.toHaveBeenCalled();
    });
    test('should call console.error for EnactPropTypes.componentOverride if string value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeComponentOverride: dummyString
      }));
      expect(consoleErrorMock).toHaveBeenCalled();
    });
    test('should not call console.error for EnactPropTypes.componentOverride if element value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeComponentOverride: DummyElement
      }));
      expect(consoleErrorMock).not.toHaveBeenCalled();
    });
  });
  describe('ref', function () {
    test('should not call console.error for EnactPropTypes.ref if ref value is given', function () {
      var ref = /*#__PURE__*/(0, _react2.createRef)();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeRef: ref
      }));
      expect(consoleErrorMock).not.toHaveBeenCalled();
    });
    test('should call console.error for EnactPropTypes.ref if non-ref value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeRef: dummyString
      }));
      expect(consoleErrorMock).toHaveBeenCalled();
    });
  });
  describe('renderable', function () {
    test('should not call console.error for EnactPropTypes.renderable if renderable value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeRenderable: DummyRenderable
      }));
      expect(consoleErrorMock).not.toHaveBeenCalled();
    });
    test('should not call console.error for EnactPropTypes.renderable if string value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeRenderable: dummyString
      }));
      expect(consoleErrorMock).not.toHaveBeenCalled();
    });
    test('should call console.error for EnactPropTypes.renderable if element value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeRenderable: DummyElement
      }));
      expect(consoleErrorMock).toHaveBeenCalled();
    });
  });
  describe('renderableOverride', function () {
    test('should not call console.error for EnactPropTypes.renderableOverride if renderable value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeRenderableOverride: DummyRenderable
      }));
      expect(consoleErrorMock).not.toHaveBeenCalled();
    });
    test('should not call console.error for EnactPropTypes.renderableOverride if string value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeRenderableOverride: dummyString
      }));
      expect(consoleErrorMock).not.toHaveBeenCalled();
    });
    test('should not call console.error for EnactPropTypes.renderableOverride if element value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        typeRenderableOverride: DummyElement
      }));
      expect(consoleErrorMock).not.toHaveBeenCalled();
    });
  });
  describe('isRequired', function () {
    var RequiredComponent = /*#__PURE__*/function (_Component2) {
      _inherits(RequiredComponent, _Component2);
      var _super2 = _createSuper(RequiredComponent);
      function RequiredComponent() {
        _classCallCheck(this, RequiredComponent);
        return _super2.apply(this, arguments);
      }
      _createClass(RequiredComponent, [{
        key: "render",
        value: function render() {
          var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            rest = Object.assign({}, (_objectDestructuringEmpty(_ref2), _ref2));
          delete rest.typeRequired;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            children: "Test"
          });
        }
      }]);
      return RequiredComponent;
    }(_react2.Component);
    RequiredComponent.displayName = 'RequiredComponent';
    RequiredComponent.propTypes = {
      typeRequired: _propTypes["default"].renderable.isRequired
    };
    test('should not call console.error when required prop value is given', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(RequiredComponent, {
        typeRequired: DummyRenderable
      }));
      expect(consoleErrorMock).not.toHaveBeenCalled();
    });
    test('should call console.error when prop value is missing for isRequired', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(RequiredComponent, {}));
      expect(consoleErrorMock).toHaveBeenCalled();
    });
  });
  describe('deprecated', function () {
    test('should call console.warn when prop value is given for EnactPropTypes.deprecated', function () {
      var ref = /*#__PURE__*/(0, _react2.createRef)();
      var DeprecatedComponent = /*#__PURE__*/function (_Component3) {
        _inherits(DeprecatedComponent, _Component3);
        var _super3 = _createSuper(DeprecatedComponent);
        function DeprecatedComponent() {
          _classCallCheck(this, DeprecatedComponent);
          return _super3.apply(this, arguments);
        }
        _createClass(DeprecatedComponent, [{
          key: "render",
          value: function render() {
            var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              rest = Object.assign({}, (_objectDestructuringEmpty(_ref3), _ref3));
            delete rest.typeDeprecated;
            return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              children: "Test"
            });
          }
        }]);
        return DeprecatedComponent;
      }(_react2.Component);
      DeprecatedComponent.displayName = 'DeprecatedComponent';
      DeprecatedComponent.propTypes = {
        typeDeprecated: _propTypes["default"].deprecated(_propTypes["default"].ref)
      };
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(DeprecatedComponent, {
        typeDeprecated: ref
      }));
      expect(consoleWarnMock).toHaveBeenCalled();
    });
    test('should call console.warn even when prop value is not given for EnactPropTypes.deprecated', function () {
      var DeprecatedComponent = /*#__PURE__*/function (_Component4) {
        _inherits(DeprecatedComponent, _Component4);
        var _super4 = _createSuper(DeprecatedComponent);
        function DeprecatedComponent() {
          _classCallCheck(this, DeprecatedComponent);
          return _super4.apply(this, arguments);
        }
        _createClass(DeprecatedComponent, [{
          key: "render",
          value: function render() {
            var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              rest = Object.assign({}, (_objectDestructuringEmpty(_ref4), _ref4));
            delete rest.typeDeprecated;
            return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              children: "Test"
            });
          }
        }]);
        return DeprecatedComponent;
      }(_react2.Component);
      DeprecatedComponent.displayName = 'DeprecatedComponent';
      DeprecatedComponent.propTypes = {
        typeDeprecated: _propTypes["default"].deprecated(_propTypes["default"].ref)
      };
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(DeprecatedComponent, {}));
      expect(consoleWarnMock).toHaveBeenCalled();
    });
  });
});