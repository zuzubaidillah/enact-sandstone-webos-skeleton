"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SpotlightContainer = void 0;
var _handle = require("@enact/core/handle");
var _pointer = require("../src/pointer");
var _spotlight = _interopRequireDefault(require("../src/spotlight"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var isNewPointerPosition = function isNewPointerPosition(ev) {
  return (0, _pointer.hasPointerMoved)(ev.clientX, ev.clientY);
};
var SpotlightContainer = exports.SpotlightContainer = /*#__PURE__*/function () {
  function SpotlightContainer(_ref) {
    var _this = this;
    var containerConfig = _ref.containerConfig,
      navigableFilter = _ref.navigableFilter,
      preserveId = _ref.preserveId;
    _classCallCheck(this, SpotlightContainer);
    // set up context and props so we can use handle binding
    this.context = {};
    this.props = {};
    this.navigableFilter = function (elem) {
      // If the component to which this was applied specified a navigableFilter, run it
      if (typeof _this.filter === 'function') {
        if (_this.filter(elem) === false) {
          return false;
        }
      }
      return true;
    };
    this.onBlurCapture = function (ev) {
      if (_this.shouldPreventBlur) {
        (0, _handle.stop)(ev);
        return false;
      }
      return true;
    };
    this.onFocusCapture = function (ev) {
      if (_this.props.disabled === true) {
        (0, _handle.stop)(ev);
        _this.silentBlur(ev);
        return false;
      }
      return true;
    };
    this.onPointerEnter = (0, _handle.handle)(isNewPointerPosition, function () {
      return _spotlight["default"].setActiveContainer(_this.id);
    }).bindAs(this, 'onPointerEnter');
    this.onPointerLeave = (0, _handle.handle)((0, _handle.not)((0, _handle.forProp)('restrict', 'self-only')), isNewPointerPosition, function (ev) {
      var parentContainer = ev.currentTarget.parentNode.closest('[data-spotlight-container]');
      var activeContainer = _spotlight["default"].getActiveContainer();

      // if this container is wrapped by another and this is the currently active
      // container, move the active container to the parent
      if (parentContainer && activeContainer === _this.id) {
        activeContainer = parentContainer.dataset.spotlightId;
        _spotlight["default"].setActiveContainer(activeContainer);
      }
    }).bindAs(this, 'onPointerLeave');
    // spotlight id - set either via props or generated by Spotlight
    this.id = null;

    // Preserve the spotlight id across instances when it is set via props and preserveId is set
    this.canPreserveId = preserveId;
    this.preserveId = false;

    // container config - set once when the container is added
    this.config = containerConfig;

    // optional filter function to limit the spottable candidates for this container
    this.filter = navigableFilter;

    // private hash of spotlight DOM attributes
    this.attr = {
      'data-spotlight-container': true
    };

    // Used to indicate that we want to stop propagation on blur events that occur as a
    // result of this component imperatively blurring itself on focus when spotlightDisabled
    this.shouldPreventBlur = false;
  }
  _createClass(SpotlightContainer, [{
    key: "attributes",
    get: function get() {
      return this.attr;
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      var disabled = props.disabled,
        id = props.id,
        muted = props.muted,
        restrict = props.restrict;
      this.props = props;
      if (this.id == null || id && this.id !== id) {
        if (this.id) {
          this.releaseContainer(this.id);
        }
        this.id = _spotlight["default"].add(_objectSpread(_objectSpread({}, this.config), {}, {
          id: id,
          restrict: restrict,
          navigableFilter: this.navigableFilter
        }));
        this.preserveId = this.canPreserveId && this.id === id;
      } else {
        _spotlight["default"].set(this.id, {
          restrict: restrict
        });
      }
      this.attr['data-spotlight-id'] = this.id;
      this.attr['data-spotlight-container-disabled'] = disabled;
      this.attr['data-spotlight-container-muted'] = muted;
    }
  }, {
    key: "unload",
    value: function unload() {
      this.releaseContainer();
    }
  }, {
    key: "releaseContainer",
    value: function releaseContainer() {
      if (this.preserveId) {
        _spotlight["default"].unmount(this.id);
      } else {
        _spotlight["default"].remove(this.id);
      }
    }
  }, {
    key: "silentBlur",
    value: function silentBlur(_ref2) {
      var target = _ref2.target;
      this.shouldPreventBlur = true;
      target.blur();
      this.shouldPreventBlur = false;
    }
  }]);
  return SpotlightContainer;
}();
var _default = exports["default"] = SpotlightContainer;