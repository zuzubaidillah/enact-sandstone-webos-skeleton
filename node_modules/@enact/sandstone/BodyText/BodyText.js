"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.BodyTextDecorator = exports.BodyTextBase = exports.BodyText = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _BodyText = _interopRequireDefault(require("@enact/ui/BodyText"));
var _Pure = _interopRequireDefault(require("@enact/ui/internal/Pure"));
var _Marquee = require("../Marquee");
var _Skinnable = _interopRequireDefault(require("../Skinnable"));
var _BodyTextModule = _interopRequireDefault(require("./BodyText.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["centered", "css", "noWrap"];
/**
 * Sandstone styled text block components and behaviors.
 *
 * @example
 * <BodyText centered>Hello Enact!</BodyText>
 *
 * @module sandstone/BodyText
 * @exports BodyText
 * @exports BodyTextBase
 * @exports BodyTextDecorator
 */
// Create a Marquee using BodyText as the base
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var MarqueeBodyText = (0, _Marquee.MarqueeDecorator)(_BodyText["default"]);

/**
 * A simple text block component.
 *
 * This component is most often not used directly but may be composed within another component as it
 * is within {@link sandstone/BodyText.BodyText|BodyText}.
 *
 * @class BodyTextBase
 * @memberof sandstone/BodyText
 * @extends ui/BodyText.BodyText
 * @ui
 * @public
 */
var BodyTextBase = exports.BodyTextBase = (0, _kind["default"])({
  name: 'BodyText',
  propTypes: /** @lends sandstone/BodyText.BodyTextBase.prototype */{
    /**
     * Centers the contents.
     *
     * Applies the `centered` CSS class which can be customized by
     * {@link /docs/developer-guide/theming/|theming}.
     *
     * @type {Boolean}
     * @public
     */
    centered: _propTypes["default"].bool,
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `bodyText` - The root class name
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,
    /**
     * Toggles multi-line (`false`) vs single-line (`true`) behavior. `noWrap` mode
     * automatically enables {@link sandstone/Marquee} so long text isn't permanently occluded.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    noWrap: _propTypes["default"].bool,
    /**
     * Sets the text size to one of the preset sizes.
     * Available sizes: 'large' (default) and 'small'.
     *
     * @type {('small'|'large')}
     * @default 'large'
     * @public
     */
    size: _propTypes["default"].oneOf(['small', 'large'])
  },
  defaultProps: {
    noWrap: false,
    size: 'large'
  },
  styles: {
    css: _BodyTextModule["default"],
    publicClassNames: 'bodyText'
  },
  computed: {
    className: function className(_ref) {
      var noWrap = _ref.noWrap,
        size = _ref.size,
        styler = _ref.styler;
      return styler.append(size, {
        noWrap: noWrap
      });
    }
  },
  render: function render(_ref2) {
    var centered = _ref2.centered,
      css = _ref2.css,
      noWrap = _ref2.noWrap,
      rest = _objectWithoutProperties(_ref2, _excluded);
    delete rest.size;
    if (noWrap) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(MarqueeBodyText, _objectSpread(_objectSpread({
        component: "div" // Assign a new component to BodyText, since DIV is not allowed inside a P tag (the default for BodyText)
        ,
        marqueeOn: "render"
      }, rest), {}, {
        alignment: centered ? 'center' : null // Centering Marquee
        ,
        centered: centered // Centering UiBodyText
        ,
        css: css
      }));
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText["default"], _objectSpread(_objectSpread({}, rest), {}, {
      centered: centered,
      css: css
    }));
  }
});

/**
 * Applies Sandstone specific behaviors to {@link sandstone/BodyText.BodyTextBase|BodyText}.
 *
 * @hoc
 * @memberof sandstone/BodyText
 * @mixes sandstone/Skinnable.Skinnable
 * @public
 */
var BodyTextDecorator = exports.BodyTextDecorator = (0, _compose["default"])(_Pure["default"], _Skinnable["default"]);

/**
 * A simple text block component, ready to use in Sandstone applications.
 *
 * `BodyText` may be used to display a block of text and is sized and spaced appropriately for a
 * Sandstone application.
 *
 * Usage:
 * ```
 * <BodyText>
 *  I have a Ham radio. There are many like it, but this one is mine.
 * </BodyText>
 * ```
 *
 * @class BodyText
 * @memberof sandstone/BodyText
 * @extends sandstone/BodyText.BodyTextBase
 * @mixes sandstone/BodyText.BodyTextDecorator
 * @ui
 * @public
 */
var BodyText = exports.BodyText = BodyTextDecorator(BodyTextBase);
var _default = exports["default"] = BodyText;