"use strict";

var _ilib = _interopRequireDefault(require("ilib"));
require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _TimePicker = _interopRequireWildcard(require("../TimePicker"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; } // Note: Tests pass 'locale' because there's no I18nDecorator to provide a value via context and
// otherwise, nothing renders in the label.
describe('TimePicker', function () {
  // Suite-wide setup

  test('should emit an onChange event when changing the hour', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleChange = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      onChange: handleChange,
      value: new Date(2000, 6, 15, 3, 30),
      locale: "en-US"
    }));
    var hourPicker = _react.screen.getAllByText('▲')[0];
    yield user.click(hourPicker);
    var expected = 1;
    var expectedType = {
      type: 'onChange',
      value: new Date(2000, 6, 15, 4, 30)
    };
    var actual = handleChange.mock.calls.length && handleChange.mock.calls[0][0];
    expect(handleChange).toBeCalledTimes(expected);
    expect(actual).toMatchObject(expectedType);
  }));
  test('should emit an onChange event when changing the minute', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleChange = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      onChange: handleChange,
      value: new Date(2000, 6, 15, 3, 30),
      locale: "en-US"
    }));
    var minutePicker = _react.screen.getAllByText('▲')[1];
    yield user.click(minutePicker);
    var expected = 1;
    var expectedType = {
      type: 'onChange',
      value: new Date(2000, 6, 15, 3, 31)
    };
    var actual = handleChange.mock.calls.length && handleChange.mock.calls[0][0];
    expect(handleChange).toBeCalledTimes(expected);
    expect(actual).toMatchObject(expectedType);
  }));
  test('should emit an onChange event when changing the meridiem', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleChange = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      onChange: handleChange,
      value: new Date(2000, 6, 15, 3, 30),
      locale: "en-US"
    }));
    var meridiemPicker = _react.screen.getAllByText('▲')[2];
    yield user.click(meridiemPicker);
    var expected = 1;
    var expectedType = {
      type: 'onChange',
      value: new Date(2000, 6, 15, 15, 30)
    };
    var actual = handleChange.mock.calls.length && handleChange.mock.calls[0][0];
    expect(handleChange).toBeCalledTimes(expected);
    expect(actual).toMatchObject(expectedType);
  }));
  test('should fire onComplete event with type when enter key pressed from the last picker', function () {
    var handleComplete = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      onComplete: handleComplete,
      value: new Date(2000, 6, 15, 3, 30),
      locale: "en-US"
    }));
    var meridiemPicker = _react.screen.getByLabelText('AM change a value with up down button');
    (0, _react.act)(function () {
      return meridiemPicker.focus();
    });
    _react.fireEvent.keyDown(meridiemPicker, {
      which: 13,
      keyCode: 13,
      code: 13
    });
    var expected = {
      type: 'onComplete',
      value: new Date(2000, 6, 15, 3, 30)
    };
    var actual = handleComplete.mock.calls.length && handleComplete.mock.calls[0][0];
    expect(actual).toMatchObject(expected);
  });
  test('should accept a JavaScript Date for its value prop', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: new Date(2000, 0, 1, 12, 30),
      locale: "en-US"
    }));
    var minutePicker = _react.screen.getByText('30');
    var expected = 'item';
    expect(minutePicker).toHaveClass(expected);
  });
  test('should set \'hourAriaLabel\' to hour picker', function () {
    var label = 'custom hour aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      hourAriaLabel: label,
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var hourPicker = _react.screen.getByLabelText(label);
    var expected = 'hourPicker';
    expect(hourPicker).toBeInTheDocument();
    expect(hourPicker).toHaveClass(expected);
  });
  test('should set \'meridiemAriaLabel\' to meridiem picker', function () {
    var label = 'custom meridiem aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      meridiemAriaLabel: label,
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var meridiemPicker = _react.screen.getByLabelText(label);
    var expected = 'meridiemPicker';
    expect(meridiemPicker).toBeInTheDocument();
    expect(meridiemPicker).toHaveClass(expected);
  });
  test('should set \'minuteAriaLabel\' to minute picker', function () {
    var label = 'custom minute aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      minuteAriaLabel: label,
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var minutePicker = _react.screen.getByLabelText(label);
    var expected = 'minutePicker';
    expect(minutePicker).toBeInTheDocument();
    expect(minutePicker).toHaveClass(expected);
  });
  test('should set \'data-webos-voice-disabled\' to hour picker when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: new Date(2000, 0, 1, 12, 30),
      "data-webos-voice-disabled": true
    }));
    var hourPicker = _react.screen.getByLabelText('12 hour change a value with up down button');
    var expected = 'data-webos-voice-disabled';
    expect(hourPicker).toHaveAttribute(expected);
  });
  test('should set \'data-webos-voice-disabled\' to meridiem picker when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: new Date(2000, 0, 1, 12, 30),
      "data-webos-voice-disabled": true
    }));
    var merdiemPicker = _react.screen.getByLabelText('AM change a value with up down button');
    var expected = 'data-webos-voice-disabled';
    expect(merdiemPicker).toHaveAttribute(expected);
  });
  test('should set \'data-webos-voice-disabled\' to minute picker when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: new Date(2000, 0, 1, 12, 30),
      "data-webos-voice-disabled": true
    }));
    var minutePicker = _react.screen.getByLabelText('0 minute change a value with up down button');
    // The minute is 0 because it does not change based on props, this needs to be fixed in timePicker

    var expected = 'data-webos-voice-disabled';
    expect(minutePicker).toHaveAttribute(expected);
  });
  test('should format a date the same as the label', function () {
    var time = new Date(2000, 0, 1, 12, 30);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: time,
      locale: "en-US"
    }));
    var header = _react.screen.getByText((0, _TimePicker.timeToLocaleString)(time), {
      collapseWhitespace: false
    }).parentElement.parentElement;
    var expected = 'heading';
    expect(header).toHaveClass(expected);
  });
  test('should format a date the same as the label in another locale', function () {
    _ilib["default"].setLocale('ar-SA');
    var time = new Date(2000, 0, 1, 12, 30);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: time,
      locale: "ar-SA"
    }));
    var header = _react.screen.getByText((0, _TimePicker.timeToLocaleString)(time), {
      collapseWhitespace: false
    }).parentElement.parentElement;
    var expected = 'heading';
    expect(header).toHaveClass(expected);
  });
  test('should not display Heading', function () {
    _ilib["default"].setLocale('en-US');
    var time = new Date(2000, 0, 1, 12, 30);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: time,
      locale: "en-US",
      noLabel: true
    }));
    var header = _react.screen.queryByText((0, _TimePicker.timeToLocaleString)(time), {
      collapseWhitespace: false
    });
    expect(header).toBeNull();
  });
  test('should change the meridiem to reflect the hour change', function () {
    var time = new Date(2000, 0, 1, 12, 30);
    var secondTime = new Date(2000, 0, 1, 11, 30);
    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
        locale: "en-US",
        value: time
      })),
      rerender = _render.rerender;
    var firstTimeDisplayed = _react.screen.queryByText('12:30 PM');
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      locale: "en-US",
      value: secondTime
    }));
    var secondTimeDisplayed = _react.screen.queryByText('11:30 AM');
    expect(firstTimeDisplayed).not.toBeNull();
    expect(secondTimeDisplayed).not.toBeNull();
  });
  test('check that the date is displayed correctly for cases of more than 2 meridiems', function () {
    _ilib["default"].setLocale('am-ET');
    var time = new Date(2000, 0, 1, 12, 30);
    var secondTime = new Date(2000, 0, 1, 11, 30);
    var _render2 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
        locale: "am-ET",
        value: time
      })),
      rerender = _render2.rerender;
    var firstTimeDisplayed = _react.screen.queryByText('6:30 ከሰዓት');
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      locale: "am-ET",
      value: secondTime
    }));
    var secondTimeDisplayed = _react.screen.queryByText('5:30 ጥዋት');
    expect(firstTimeDisplayed).not.toBeNull();
    expect(secondTimeDisplayed).not.toBeNull();
  });
  describe('#timeToLocaleString', function () {
    test('method should return \'null\' for an \'undefined\' time', function () {
      var time = (0, _TimePicker.timeToLocaleString)(undefined); // eslint-disable-line no-undefined

      expect(time).toBeNull();
    });
  });
});