"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AlertBase = exports.Alert = void 0;
Object.defineProperty(exports, "AlertImage", {
  enumerable: true,
  get: function get() {
    return _AlertImage["default"];
  }
});
exports["default"] = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _util = require("@enact/core/util");
var _IdProvider = _interopRequireDefault(require("@enact/ui/internal/IdProvider"));
var _Layout = _interopRequireWildcard(require("@enact/ui/Layout"));
var _resolution = _interopRequireDefault(require("@enact/ui/resolution"));
var _Slottable = _interopRequireDefault(require("@enact/ui/Slottable"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = require("react");
var _BodyText = _interopRequireDefault(require("../BodyText"));
var _Heading = _interopRequireDefault(require("../Heading"));
var _Popup = _interopRequireDefault(require("../Popup"));
var _AlertImage = _interopRequireDefault(require("./AlertImage"));
var _AlertModule = _interopRequireDefault(require("./Alert.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["buttons", "contentComponent", "children", "css", "id", "image", "overflow", "title", "type"];
/**
 * Sandstone styled modal Alert components.
 *
 * @module sandstone/Alert
 * @exports Alert
 * @exports AlertBase
 * @exports AlertImage
 */
/**
 * A modal Alert component.
 *
 * This component is most often not used directly but may be composed within another component as it
 * is within {@link sandstone/Alert.Alert|Alert}.
 *
 * @class AlertBase
 * @memberof sandstone/Alert
 * @ui
 * @public
 */
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var AlertBase = exports.AlertBase = (0, _kind["default"])({
  name: 'Alert',
  propTypes: /** @lends sandstone/Alert.AlertBase.prototype */{
    /**
     * Buttons to be included under the component.
     *
     * Typically, up to 3 buttons are used.
     *
     * @type {Element|Element[]}
     * @public
     */
    buttons: _propTypes["default"].oneOfType([_propTypes["default"].element, _propTypes["default"].arrayOf(_propTypes["default"].element)]),
    /**
     * The contents of the body of the component.
     *
     * Only shown when `type="overlay"`. If `children` is text-only, it will be wrapped with
     * {@link sandstone/BodyText|BodyText}.
     *
     * @type {Node}
     * @public
     */
    children: _propTypes["default"].node,
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `alert` - The root class name
     * * `content` - The content component class
     * * `fullscreen` - Applied to a `type='fullscreen'` alert
     * * `title` - The title component class
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,
    /**
     * The `id` of Alert referred to when generating ids for `'title'` and `'buttons'`.
     *
     * @type {String}
     * @private
     */
    id: _propTypes["default"].string,
    /**
     * Image to be included in the Alert component.
     *
     * It is recommended to use the `AlertImage` component.
     *
     * @type {Element}
     * @public
     */
    image: _propTypes["default"].element,
    /**
     * Called when the user requests to close the Alert.
     *
     * This also includes pressing the cancel key.
     *
     * @type {Function}
     * @public
     */
    onClose: _propTypes["default"].func,
    /**
     * Called after the transition to hide the Alert has finished.
     *
     * @type {Function}
     * @public
     */
    onHide: _propTypes["default"].func,
    /**
     * Opens the Alert.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    open: _propTypes["default"].bool,
    /**
     * The primary text displayed.
     *
     * Only shown when `type="fullscreen"`.
     *
     * @type {String}
     * @public
     */
    title: _propTypes["default"].string,
    /**
     * Type of popup.
     *
     * There are two types:
     *
     * * `fullscreen` - Full screen popup
     * * `overlay` - Popup in the center of the screen
     *
     * @type {('fullscreen'|'overlay')}
     * @default 'fullscreen'
     * @public
     */
    type: _propTypes["default"].oneOf(['fullscreen', 'overlay'])
  },
  defaultProps: {
    open: false,
    type: 'fullscreen'
  },
  styles: {
    css: _AlertModule["default"],
    className: 'alert',
    publicClassNames: ['alert', 'content', 'fullscreen', 'title']
  },
  computed: {
    buttons: function buttons(_ref) {
      var _buttons = _ref.buttons,
        css = _ref.css;
      return (0, _util.mapAndFilterChildren)(_buttons, function (button, index) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
          className: css.buttonCell,
          shrink: true,
          children: button
        }, "button".concat(index));
      }) || null;
    },
    contentComponent: function contentComponent(_ref2) {
      var children = _ref2.children;
      if (typeof children === 'string' || Array.isArray(children) && children.every(function (child) {
        return child == null || typeof child === 'string';
      })) {
        return _BodyText["default"];
      }
    },
    className: function className(_ref3) {
      var buttons = _ref3.buttons,
        image = _ref3.image,
        title = _ref3.title,
        type = _ref3.type,
        styler = _ref3.styler;
      return styler.append({
        maxButtons: buttons && _react.Children.toArray(buttons).filter(Boolean).length > 2,
        noImage: !image,
        noTitle: type === 'fullscreen' && !title
      }, type);
    },
    overflow: function overflow(_ref4) {
      var buttons = _ref4.buttons;
      if (typeof window !== 'undefined' && buttons) {
        var contentWidth = _resolution["default"].scale(1200); // If you will change this value, please change @sand-alert-overlay-content-width too.
        var buttonsWidth = _resolution["default"].scale(540 + 126); // If you will change this value, please change @sand-button-min-width + @sand-alert-overlay-buttons-margin too.

        return window.innerWidth < contentWidth + buttonsWidth;
      }
      return false;
    }
  },
  render: function render(_ref5) {
    var buttons = _ref5.buttons,
      contentComponent = _ref5.contentComponent,
      children = _ref5.children,
      css = _ref5.css,
      id = _ref5.id,
      image = _ref5.image,
      overflow = _ref5.overflow,
      title = _ref5.title,
      type = _ref5.type,
      rest = _objectWithoutProperties(_ref5, _excluded);
    var fullscreen = type === 'fullscreen';
    var position = type === 'overlay' ? 'bottom' : type;
    var showTitle = fullscreen && title;
    var ariaLabelledBy = (showTitle ? "".concat(id, "_title ") : '') + "".concat(id, "_content ").concat(id, "_buttons");
    var layoutOrientation = fullscreen || overflow ? 'vertical' : 'horizontal';
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      "aria-owns": id,
      className: css.alertWrapper,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Popup["default"], _objectSpread(_objectSpread({}, rest), {}, {
        id: id,
        noAnimation: true,
        "aria-labelledby": ariaLabelledBy,
        css: css,
        position: position,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout["default"], {
          align: "center center",
          orientation: layoutOrientation,
          children: [image ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
            shrink: true,
            className: css.alertImage,
            children: image
          }) : null, showTitle ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
            shrink: true,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Heading["default"], {
              size: "title",
              alignment: "center",
              className: css.title,
              id: "".concat(id, "_title"),
              children: title
            })
          }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
            shrink: true,
            align: fullscreen || overflow ? 'center' : '',
            component: contentComponent,
            className: (0, _classnames["default"])(css.content, overflow ? null : css.full),
            id: "".concat(id, "_content"),
            children: children
          }), buttons ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
            align: fullscreen || overflow ? '' : 'end',
            shrink: true,
            className: (0, _classnames["default"])(css.buttonContainer, overflow ? null : css.full),
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout["default"], {
              align: "center",
              orientation: "vertical",
              id: "".concat(id, "_buttons"),
              children: buttons
            })
          }) : null]
        })
      }))
    });
  }
});

/**
 * A modal Alert component, ready to use in Sandstone applications.
 *
 * `Alert` may be used to interrupt a workflow to receive feedback from the user.
 * The dialog consists of a title, a message, and an area for additional
 * {@link sandstone/Alert.Alert.buttons|buttons}.
 *
 * Usage:
 * ```
 * <Alert
 *   open={this.state.open}
 *   title="An Important Alert"
 * >
 *   <image>
 *     <AlertImage src={this.state.src} type="thumbnail" />
 *   </image>
 *
 *   Body text for alert. Components may also be used here for greater customizability.
 *
 *   <buttons>
 *     <Button>Button 1</Button>
 *     <Button>Button 2</Button>
 *   </buttons>
 * </Alert>
 * ```
 *
 * @class Alert
 * @memberof sandstone/Alert
 * @extends sandstone/Alert.AlertBase
 * @mixes ui/Slottable.Slottable
 * @ui
 * @public
 */
var Alert = exports.Alert = (0, _IdProvider["default"])({
  generateProp: null,
  prefix: 'a_'
}, (0, _Slottable["default"])({
  slots: ['title', 'buttons', 'image']
}, AlertBase));
var _default = exports["default"] = Alert;