"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.useFocusOnTransition = useFocusOnTransition;
var _handle = _interopRequireWildcard(require("@enact/core/handle"));
var _useHandlers = _interopRequireDefault(require("@enact/core/useHandlers"));
var _spotlight = _interopRequireDefault(require("@enact/spotlight"));
var _react = require("react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var transitionHandlers = {
  onTransition: (0, _handle["default"])((0, _handle.forwardWithPrevent)('onTransition'), function (ev, _ref, _ref2) {
    var spotlightId = _ref.spotlightId;
    var current = _ref2.current;
    current.timerId = setTimeout(function () {
      var currentSpotlight = _spotlight["default"].getCurrent();
      if (spotlightId && !currentSpotlight) {
        _spotlight["default"].focus(spotlightId);
      }
    }, 40);
  }),
  onWillTransition: (0, _handle["default"])((0, _handle.forwardWithPrevent)('onWillTransition'), function (ev, props, _ref3) {
    var current = _ref3.current;
    clearTimeout(current.timerId);
    current.timerId = null;
    var currentSpotlight = _spotlight["default"].getCurrent();
    if (!_spotlight["default"].getPointerMode() && currentSpotlight) {
      currentSpotlight.blur();
    }
  })
};
function useFocusOnTransition(config) {
  var _useRef = (0, _react.useRef)({
      timerId: null
    }),
    current = _useRef.current;
  var handlers = (0, _useHandlers["default"])(transitionHandlers, config, {
    current: current
  });
  return handlers;
}
var _default = exports["default"] = useFocusOnTransition;