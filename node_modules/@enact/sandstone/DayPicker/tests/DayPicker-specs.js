"use strict";

var _i18n = _interopRequireDefault(require("@enact/i18n"));
require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _DayPicker = _interopRequireWildcard(require("../DayPicker"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
describe('DayPicker', function () {
  test('should not select any item when there is no passed prop `selected`', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {}));
    var allDays = _react.screen.getAllByRole('checkbox');
    var _iterator = _createForOfIteratorHelper(allDays),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var day = _step.value;
        expect(day).toHaveAttribute('aria-checked', 'false');
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
  test('should select day when passed prop \'selected\'', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {
      selected: [1]
    }));
    var selectedDay = _react.screen.getAllByRole('checkbox')[2];
    var expected = 'selected';
    expect(selectedDay).toHaveClass(expected);
  });
  test('should select day when passed prop \'selected\' as a number', function () {
    // We need to change the locale to firstDayOfWeek !== 0.
    // If firstDayOfWeek === 0, the number type check conditional statement
    // is skipped due to the fast execution path of localizeSelected(), which
    // reduces code coverage..
    _i18n["default"].setLocale('es-ES');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {
      locale: "es-ES",
      selected: 1
    }));
    var selectedDay = _react.screen.getAllByRole('checkbox')[1];
    var expected = 'selected';
    expect(selectedDay).toHaveClass(expected);
  });
  test('should emit an onSelect event with \'onSelect\' type when selecting days', /*#__PURE__*/_asyncToGenerator(function* () {
    _i18n["default"].setLocale('en-US');
    var handleSelect = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {
      onSelect: handleSelect
    }));
    var item = _react.screen.getAllByRole('checkbox')[2];
    yield user.click(item);
    expect(handleSelect).toHaveBeenCalledWith({
      content: 'Mon',
      selected: [1],
      type: 'onSelect'
    });
  }));
  test('should include \'content\' in onSelect event payload which respects dayNameLength', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleSelect = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {
      onSelect: handleSelect,
      dayNameLength: "short"
    }));

    // select Monday
    var item = _react.screen.getByText('Monday');
    yield user.click(item);
    var expected = {
      // M is the "short" value from ilib for Monday
      content: 'M'
    };
    var actual = handleSelect.mock.calls[0][0];
    expect(actual).toMatchObject(expected);
  }));
  test('should return \'None\' when selected is null', function () {
    var label = (0, _DayPicker.getSelectedDayString)(null, 'None');
    var expected = 'None';
    expect(label).toBe(expected);
  });
  test('should return \'None\' when selected is empty', function () {
    var label = (0, _DayPicker.getSelectedDayString)([], 'None');
    var expected = 'None';
    expect(label).toBe(expected);
  });
  test('should return \'Every Weekend\' when all selected', function () {
    var selected = [0, 6];
    var label = (0, _DayPicker.getSelectedDayString)(selected);
    var expected = 'Every Weekend';
    expect(label).toBe(expected);
  });
  test('should return \'Every Weekday\' when all selected', function () {
    var selected = [1, 2, 3, 4, 5];
    var label = (0, _DayPicker.getSelectedDayString)(selected);
    var expected = 'Every Weekday';
    expect(label).toBe(expected);
  });
  test('should return \'Every Day\' when all selected', function () {
    var selected = [0, 1, 2, 3, 4, 5, 6];
    var label = (0, _DayPicker.getSelectedDayString)(selected);
    var expected = 'Every Day';
    expect(label).toBe(expected);
  });
  describe('with alternate first day of week', function () {
    test('should accept and emit a generalized selected array', /*#__PURE__*/_asyncToGenerator(function* () {
      _i18n["default"].setLocale('es-ES');
      var handleSelect = jest.fn();
      var user = _userEvent["default"].setup();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {
        defaultSelected: [0],
        locale: "es-ES",
        onSelect: handleSelect
      }));

      // select Lunes (Monday) which is the first day of the week for es-ES
      var item = _react.screen.getAllByRole('checkbox')[0];
      yield user.click(item);
      var expected = {
        // Expect Sunday (0) and Monday (1) to be selected
        selected: [0, 1]
      };
      var actual = handleSelect.mock.calls[0][0];
      expect(actual).toMatchObject(expected);
    }));
  });
});